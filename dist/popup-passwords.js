let currentSite=null,cachedPasswords=[];async function getCurrentSite(){try{const[e]=await chrome.tabs.query({active:!0,currentWindow:!0});if(e?.url)return new URL(e.url).hostname.replace("www.","")}catch(e){console.log("Could not get current site:",e)}return null}function initialize(){console.log("🚀 POPUP: Initializing..."),document.getElementById("showPasswordsBtn").style.display="block",document.getElementById("loading").style.display="none",document.getElementById("error").style.display="none",document.getElementById("noPasswords").style.display="none";const e=document.querySelector(".show-passwords-btn");e&&e.addEventListener("click",()=>loadPasswords()),document.querySelectorAll(".refresh-btn").forEach(e=>{e.addEventListener("click",()=>loadPasswords())})}async function loadPasswords(){console.log("🚀 POPUP: Loading passwords..."),document.getElementById("passwordsList").innerHTML="",document.getElementById("showPasswordsBtn").style.display="none",document.getElementById("loading").style.display="block",document.getElementById("error").style.display="none",document.getElementById("noPasswords").style.display="none";try{currentSite=await getCurrentSite(),console.log("🌐 POPUP: Current site:",currentSite),console.log("📤 POPUP: Creating long-lived connection...");const e=await new Promise((e,t)=>{const n=chrome.runtime.connect({name:"passwordsPort"});let s=!1;n.onMessage.addListener(o=>{console.log("✅ POPUP: Received message via port:",o),"passwords"===o.type?(s=!0,n.disconnect(),e(o.data||[])):"error"===o.type&&(s=!0,n.disconnect(),t(new Error(o.error)))}),n.onDisconnect.addListener(()=>{s||(console.error("❌ POPUP: Port disconnected before response"),t(new Error("Port disconnected")))}),n.postMessage({action:"getAllPasswordsForPopup",data:{currentSite}}),console.log("📤 POPUP: Request sent via port")});if(document.getElementById("loading").style.display="none",console.log("📋 POPUP: Got passwords:",e),console.log("📋 POPUP: Count:",e?.length),!e||0===e.length)return console.log("⚠️ POPUP: No passwords found"),void(document.getElementById("noPasswords").style.display="block");console.log("✅ POPUP: Displaying",e.length,"passwords"),cachedPasswords=e,displayPasswords(e)}catch(e){console.error("❌ POPUP: Load passwords error:",e),document.getElementById("loading").style.display="none",document.getElementById("error").style.display="block"}}function displayPasswords(e){console.log("🎨 POPUP: Displaying passwords:",e);const t=document.getElementById("passwordsList");t.innerHTML="",e.forEach((e,n)=>{const s=document.createElement("div");s.className="password-item",e.websiteName===currentSite&&s.classList.add("current-site"),s.innerHTML=`\n            <div class="website-name">\n                <span class="site-icon">🌐</span>\n                ${e.websiteName}\n                ${e.websiteName===currentSite?'<span class="current-badge">Current Site</span>':""}\n            </div>\n            <div class="password-display">\n                <span class="password-text">••••••••</span>\n                <button class="copy-btn" data-index="${n}" title="Copy password">\n                    📋 Copy\n                </button>\n                <button class="share-btn" data-index="${n}" title="Share access">\n                    🔐 Share\n                </button>\n                <button class="delete-btn" data-index="${n}" title="Delete password">\n                    🗑️ Delete\n                </button>\n            </div>\n        `,t.appendChild(s)}),document.querySelectorAll(".copy-btn").forEach(t=>{t.addEventListener("click",async t=>{const n=parseInt(t.target.dataset.index),s=e[n];await copyPassword(s,t.target)})}),document.querySelectorAll(".share-btn").forEach(t=>{t.addEventListener("click",t=>{const n=parseInt(t.target.dataset.index);openShareDialog(e[n])})}),document.querySelectorAll(".delete-btn").forEach(t=>{t.addEventListener("click",t=>{const n=parseInt(t.target.dataset.index);deletePassword(e[n],t.target)})}),console.log("✅ POPUP: Passwords displayed with event listeners")}async function copyPassword(e,t){try{console.log("� POPUP: Copying password from cache:",e.websiteName),t.disabled=!0;const n=t.textContent;t.textContent="📋 Copying...";const s=e.password;if(!s)throw new Error("No password data available");await navigator.clipboard.writeText(s),console.log("✅ POPUP: Password copied to clipboard"),t.textContent="✅ Copied!",t.classList.add("copied"),setTimeout(()=>{t.textContent=n,t.classList.remove("copied"),t.disabled=!1},2e3)}catch(e){console.error("❌ POPUP: Failed to copy password:",e),t.disabled=!1,t.textContent="❌ Failed",setTimeout(()=>{t.textContent="📋 Copy"},2e3)}}async function copyToClipboard(e,t){try{await navigator.clipboard.writeText(e),console.log("✅ Password copied to clipboard");const n=t.textContent;t.textContent="✅ Copied!",t.classList.add("copied"),setTimeout(()=>{t.textContent=n,t.classList.remove("copied")},2e3)}catch(e){console.error("❌ Failed to copy:",e),t.textContent="❌ Failed",setTimeout(()=>{t.textContent="📋 Copy"},2e3)}}async function deletePassword(e,t){try{if(!confirm(`Are you sure you want to delete the password for "${e.websiteName}"?`))return;console.log("🗑️ POPUP: Deleting password:",e),t.disabled=!0,t.textContent,t.textContent="⏳ Deleting...",await new Promise((t,n)=>{const s=chrome.runtime.connect({name:"deletePort"});let o=!1;s.onMessage.addListener(e=>{console.log("✅ POPUP: Delete response:",e),"deleted"===e.type?(o=!0,s.disconnect(),t(e.data)):"error"===e.type&&(o=!0,s.disconnect(),n(new Error(e.error)))}),s.onDisconnect.addListener(()=>{o||(console.error("❌ POPUP: Delete port disconnected before response"),n(new Error("Port disconnected")))}),s.postMessage({action:"deletePassword",data:{collection:e.collection,document:e.document}})}),console.log("✅ Password deleted successfully"),t.textContent="✅ Deleted!",t.classList.add("deleted"),setTimeout(()=>{loadPasswords()},1e3)}catch(e){console.error("❌ Failed to delete password:",e),alert("Failed to delete password. Please try again."),t.disabled=!1,t.textContent="🗑️ Delete"}}function openShareDialog(e){console.log("🔐 POPUP: Opening share dialog for:",e);const t=document.createElement("div");t.className="share-overlay";const n=document.createElement("div");n.className="share-dialog",n.innerHTML=`\n        <div class="share-header">\n            <h3>🔐 Manage Access: ${e.websiteName}</h3>\n            <button class="close-dialog-btn">✕</button>\n        </div>\n        <div class="share-content">\n            <label for="grantee-did">Grantee DID:</label>\n            <input type="text" id="grantee-did" placeholder="did:nil:..." class="grantee-input">\n            \n            <div class="share-actions">\n                <button class="grant-btn">✅ Grant Access</button>\n                <button class="revoke-btn">❌ Revoke Access</button>\n            </div>\n        </div>\n    `,t.appendChild(n),document.body.appendChild(t);const s=n.querySelector(".close-dialog-btn"),o=n.querySelector(".grant-btn"),a=n.querySelector(".revoke-btn"),r=n.querySelector("#grantee-did");s.addEventListener("click",()=>{t.remove()}),t.addEventListener("click",e=>{e.target===t&&t.remove()}),o.addEventListener("click",async()=>{const t=r.value.trim();t?t.startsWith("did:nil:")?await grantAccess(e,t,o):alert('Invalid DID format. Must start with "did:nil:"'):alert("Please enter a Grantee DID")}),a.addEventListener("click",async()=>{const t=r.value.trim();t?t.startsWith("did:nil:")?await revokeAccess(e,t,a):alert('Invalid DID format. Must start with "did:nil:"'):alert("Please enter a Grantee DID")})}async function grantAccess(e,t,n){try{console.log("🔐 POPUP: Granting access:",{pwd:e,granteeDid:t}),n.disabled=!0;const s=n.textContent;n.textContent="⏳ Granting...",await new Promise((n,s)=>{const o=chrome.runtime.connect({name:"accessPort"});let a=!1;o.onMessage.addListener(e=>{console.log("✅ POPUP: Grant response:",e),"granted"===e.type?(a=!0,o.disconnect(),n(e.data)):"error"===e.type&&(a=!0,o.disconnect(),s(new Error(e.error)))}),o.onDisconnect.addListener(()=>{a||s(new Error("Port disconnected"))}),o.postMessage({action:"grantAccess",data:{collection:e.collection,document:e.document,granteeDid:t}})}),console.log("✅ Access granted successfully"),alert(`✅ Access granted to ${t.substring(0,20)}...`),n.textContent=s,n.disabled=!1}catch(e){console.error("❌ Failed to grant access:",e);let t="Failed to grant access";e.message.includes("not found")||e.message.includes("does not exist")?t="DID not found in Nillion network. Please verify the DID exists.":e.message&&(t=`Failed to grant access: ${e.message}`),alert("❌ "+t),n.textContent="✅ Grant Access",n.disabled=!1}}async function revokeAccess(e,t,n){try{console.log("🚫 POPUP: Revoking access:",{pwd:e,granteeDid:t}),n.disabled=!0;const s=n.textContent;n.textContent="⏳ Revoking...",await new Promise((n,s)=>{const o=chrome.runtime.connect({name:"accessPort"});let a=!1;o.onMessage.addListener(e=>{console.log("✅ POPUP: Revoke response:",e),"revoked"===e.type?(a=!0,o.disconnect(),n(e.data)):"error"===e.type&&(a=!0,o.disconnect(),s(new Error(e.error)))}),o.onDisconnect.addListener(()=>{a||s(new Error("Port disconnected"))}),o.postMessage({action:"revokeAccess",data:{collection:e.collection,document:e.document,granteeDid:t}})}),console.log("✅ Access revoked successfully"),alert(`✅ Access revoked from ${t.substring(0,20)}...`),n.textContent=s,n.disabled=!1}catch(e){console.error("❌ Failed to revoke access:",e);let t="Failed to revoke access";e.message.includes("not found")||e.message.includes("No access granted")||e.message.includes("does not exist")?t="Cannot revoke: No access was granted to this DID. Please grant access first.":e.message&&(t=`Failed to revoke access: ${e.message}`),alert("❌ "+t),n.textContent="❌ Revoke Access",n.disabled=!1}}document.addEventListener("DOMContentLoaded",initialize);